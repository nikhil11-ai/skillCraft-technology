import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import chi2_contingency, ttest_ind
from sklearn.preprocessing import LabelEncoder

# Setting the style for seaborn
sns.set(style="whitegrid")

# Load the dataset
train_df = pd.read_csv(r"C:\Users\hp\Desktop\train.csv")

# Data Cleaning
# Fill missing Age values with the median age
train_df['Age'] = train_df['Age'].fillna(train_df['Age'].median())

# Fill missing Embarked values with the mode
train_df['Embarked'] = train_df['Embarked'].fillna(train_df['Embarked'].mode()[0])

# Feature Engineering
# 1. Creating a 'Title' feature from 'Name'
train_df['Title'] = train_df['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())

# 2. Creating an 'Age Group' feature
train_df['AgeGroup'] = pd.cut(train_df['Age'], bins=[0, 12, 18, 35, 60, 80], labels=['Child', 'Teen', 'Young Adult', 'Adult', 'Senior'])

# 3. Creating a 'Fare Band' feature
train_df['FareBand'] = pd.qcut(train_df['Fare'], 4, labels=['Low', 'Medium', 'High', 'Very High'])

# 4. Creating a 'Family Size' feature
train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1  # Including the passenger themselves

# 5. Creating an 'IsAlone' feature
train_df['IsAlone'] = 1  # Initialize to 1 (True)
train_df.loc[train_df['FamilySize'] > 1, 'IsAlone'] = 0  # Update to 0 (False) if family size is greater than 1

# Basic Visualizations
# Plot survival rate by passenger class
plt.figure(figsize=(8, 5))
sns.barplot(x='Pclass', y='Survived', data=train_df)
plt.title('Survival Rate by Passenger Class')
plt.show()

# Plot survival rate by gender
plt.figure(figsize=(8, 5))
sns.barplot(x='Sex', y='Survived', data=train_df)
plt.title('Survival Rate by Gender')
plt.show()

# Plot the age distribution of passengers
plt.figure(figsize=(8, 5))
sns.histplot(train_df['Age'], kde=True)
plt.title('Age Distribution of Passengers')
plt.show()

# Plot the fare distribution
plt.figure(figsize=(8, 5))
sns.histplot(train_df['Fare'], kde=True)
plt.title('Fare Distribution of Passengers')
plt.show()

# Plot survival rate by family size
plt.figure(figsize=(8, 5))
sns.barplot(x='FamilySize', y='Survived', data=train_df)
plt.title('Survival Rate by Family Size')
plt.show()

# Advanced Visualizations
# Survival rate by Title
plt.figure(figsize=(10, 6))
sns.barplot(x='Title', y='Survived', data=train_df, errorbar=None)
plt.xticks(rotation=45)
plt.title('Survival Rate by Title')
plt.show()

# Survival rate by Age Group
plt.figure(figsize=(8, 5))
sns.barplot(x='AgeGroup', y='Survived', data=train_df, errorbar=None)
plt.title('Survival Rate by Age Group')
plt.show()

# Survival rate by Fare Band
plt.figure(figsize=(8, 5))
sns.barplot(x='FareBand', y='Survived', data=train_df, errorbar=None)
plt.title('Survival Rate by Fare Band')
plt.show()

# Statistical Analysis
# 1. Chi-square test for categorical variables: Survival vs Pclass, Sex, Embarked, Title
contingency_table = pd.crosstab(train_df['Pclass'], train_df['Survived'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
print(f"Chi-square test Pclass vs Survived: p-value = {p}")

contingency_table = pd.crosstab(train_df['Sex'], train_df['Survived'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
print(f"Chi-square test Sex vs Survived: p-value = {p}")

contingency_table = pd.crosstab(train_df['Embarked'], train_df['Survived'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
print(f"Chi-square test Embarked vs Survived: p-value = {p}")

contingency_table = pd.crosstab(train_df['Title'], train_df['Survived'])
chi2, p, dof, expected = chi2_contingency(contingency_table)
print(f"Chi-square test Title vs Survived: p-value = {p}")

# 2. T-test for continuous variables: Survival vs Age, Fare
survived = train_df[train_df['Survived'] == 1]['Age'].dropna()
not_survived = train_df[train_df['Survived'] == 0]['Age'].dropna()
t_stat, p_val = ttest_ind(survived, not_survived)
print(f"T-test Age vs Survived: p-value = {p_val}")

survived = train_df[train_df['Survived'] == 1]['Fare']
not_survived = train_df[train_df['Survived'] == 0]['Fare']
t_stat, p_val = ttest_ind(survived, not_survived)
print(f"T-test Fare vs Survived: p-value = {p_val}")

# Model Preparation
# Encoding categorical variables
label_encoder = LabelEncoder()

# Applying label encoding only to relevant categorical columns
for column in ['Sex', 'Embarked', 'Title', 'AgeGroup', 'FareBand']:
    train_df[column] = label_encoder.fit_transform(train_df[column].astype(str))

# Display the first few rows of the modified dataset
print(train_df.head())
